From 4d17bf40b3eb5a74a5540ba99c9c362ffc93b199 Mon Sep 17 00:00:00 2001
From: Denis Smolyakov <denis.smolyakov@intel.com>
Date: Tue, 14 Dec 2021 19:18:18 +0300
Subject: [PATCH] Include tracker_gpu_loader only if vaapi enabled (#307)

---
 gst/elements/gvatrack/CMakeLists.txt  | 14 ++++++++++++--
 gst/elements/gvatrack/vas/tracker.cpp | 12 +++++++++++-
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/gst/elements/gvatrack/CMakeLists.txt b/gst/elements/gvatrack/CMakeLists.txt
index 1ebb8b54f..4e0a0a19e 100644
--- a/gst/elements/gvatrack/CMakeLists.txt
+++ b/gst/elements/gvatrack/CMakeLists.txt
@@ -16,13 +16,23 @@ pkg_check_modules(GSTREAMER gstreamer-1.0>=1.14 REQUIRED)
 file (GLOB MAIN_SRC
     ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/*.c
-    ${CMAKE_CURRENT_SOURCE_DIR}/vas/*.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/vas/tracker.cpp
 )
 file (GLOB MAIN_HEADERS
     ${CMAKE_CURRENT_SOURCE_DIR}/*.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/vas/*.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/vas/mapped_mat.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/vas/tracker.h
 )
 
+if (${ENABLE_VAAPI})
+    list(APPEND MAIN_SRC
+        ${CMAKE_CURRENT_SOURCE_DIR}/vas/tracker_gpu_loader.cpp
+    )
+    list(APPEND MAIN_HEADERS
+        ${CMAKE_CURRENT_SOURCE_DIR}/vas/tracker_gpu_loader.h
+    )
+endif()
+
 add_library(${TARGET_NAME} SHARED ${MAIN_SRC} ${MAIN_HEADERS})
 set_target_lib_version(${TARGET_NAME})
 set_compile_flags(${TARGET_NAME})
diff --git a/gst/elements/gvatrack/vas/tracker.cpp b/gst/elements/gvatrack/vas/tracker.cpp
index db83b810b..b700991ef 100644
--- a/gst/elements/gvatrack/vas/tracker.cpp
+++ b/gst/elements/gvatrack/vas/tracker.cpp
@@ -9,7 +9,9 @@
 
 #include "gva_buffer_map.h"
 #include "gva_utils.h"
+#ifdef ENABLE_VAAPI
 #include "tracker_gpu_loader.h"
+#endif
 #include "utils.h"
 #include "video_frame.h"
 
@@ -106,6 +108,7 @@ Tracker::Tracker(const GstGvaTrack *gva_track, vas::ot::TrackingType tracking_ty
     std::vector<std::string> full_device = Utils::splitString(gva_track->device, '.');
     auto backend = backendType(full_device[0]);
 
+#ifdef ENABLE_VAAPI
     const bool use_gpu_so =
         backend == vas::BackendType::GPU && (tracking_type == vas::ot::TrackingType::ZERO_TERM ||
                                              tracking_type == vas::ot::TrackingType::ZERO_TERM_COLOR_HISTOGRAM);
@@ -117,6 +120,9 @@ Tracker::Tracker(const GstGvaTrack *gva_track, vas::ot::TrackingType tracking_ty
     } else {
         builder = std::unique_ptr<vas::ot::ObjectTracker::Builder>(new vas::ot::ObjectTracker::Builder());
     }
+#else
+    builder = std::unique_ptr<vas::ot::ObjectTracker::Builder>(new vas::ot::ObjectTracker::Builder());
+#endif
 
     builder->input_image_format = ConvertFormat(gva_track->info->finfo->format);
 
@@ -161,12 +167,16 @@ Tracker::Tracker(const GstGvaTrack *gva_track, vas::ot::TrackingType tracking_ty
     }
 
     builder->platform_config = std::move(cfg);
+#ifdef ENABLE_VAAPI
     if (use_gpu_so) {
         // TODO: Need to get va display
         // object_tracker = builder.Build(va_context.DisplayRaw(), tracker_type);
     } else {
+#endif
         object_tracker = builder->Build(tracker_type);
+#ifdef ENABLE_VAAPI
     }
+#endif
 }
 
 void Tracker::track(GstBuffer *buffer) {
@@ -262,4 +272,4 @@ std::vector<vas::ot::Object> Tracker::trackGPU(GstBuffer *buffer,
                                                 detected_objects);
 }
 
-#endif
\ No newline at end of file
+#endif
